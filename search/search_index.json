{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":"Python Package Template <p>This project is a template for a Python package.</p> <p>Check my Generative AI Project Template</p> <p> </p> <p> </p> <p>This package is a template for a python package. This project uses uv for package management. We will follow the same naming conventions. For example, there is a difference between a library (package) project and an application project. This is a library (package) project.</p> <p>It contains the following parts :</p> <ul> <li> <p>The Python package (python_package_template): contains the code for the project. It can be used by users by pip installing the wheel and is maintained by the maintainers.</p> </li> <li> <p>Autogenerated documentation: Docs made using MkDocs.</p> </li> </ul>"},{"location":"#authors","title":"\ud83d\udc65  Authors","text":"<ul> <li>(Author) Amine Djeghri</li> </ul>"},{"location":"#features","title":"\ud83e\udde0 Features","text":"<p>Engineering tools:</p> <ul> <li>[x] Use UV to manage packages</li> <li>[x] pre-commit hooks: use <code>ruff</code> to ensure the code quality &amp; <code>detect-secrets</code> to scan the secrets in the code.</li> <li>[x] Logging using loguru (with colors)</li> <li>[x] Pytest for unit tests</li> <li>[x] Dockerized project (Dockerfile) both for development and production</li> <li>[x] Make commands to handle everything for you: install, run, test</li> </ul> <p>CI/CD &amp; Maintenance tools:</p> <ul> <li>[x] CI/CD pipelines: <code>.github/workflows</code> for GitHub</li> <li>[x] Local CI/CD pipelines: GitHub Actions using <code>github act</code></li> <li>[x] GitHub Actions for deploying to GitHub Pages with mkdocs gh-deploy</li> <li>[x] Dependabot for automatic dependency and security updates</li> </ul> <p>Documentation tools:</p> <ul> <li>[x] Wiki creation and setup of documentation website using Mkdocs</li> <li>[x] GitHub Actions for deploying to GitHub Pages with mkdocs gh-deploy</li> </ul> <p>Upcoming features: - [ ] optimize caching in CI/CD -  (https://docs.github.com/en/communities/using-templates-to-encourage-useful-issues-and-pull-requests/creating-a-pull-request-template-for-your-repository)</p>"},{"location":"#1-getting-started","title":"1. Getting started","text":"<p>The following files are used in the contribution pipeline:</p> <ul> <li><code>.env.example</code>: example of the .env file.</li> <li><code>.env</code> : contains the environment variables used by the app.</li> <li><code>Makefile</code>: contains the commands to run the app locally.</li> <li><code>Dockerfile</code>: the dockerfile used to build the project inside a container. It uses the Makefile commands to run the app.</li> <li><code>.pre-commit-config.yaml</code>: pre-commit hooks configuration file</li> <li><code>pyproject.toml</code>: contains the pytest, ruff &amp; other configurations.</li> <li><code>src/python_package_tempalte/utils.py</code>: logger using logguru and settings  using pydantic.   the frontend.</li> <li><code>.github/workflows/**.yml</code>: GitHub actions configuration files.</li> <li><code>.github/dependabot.yml</code>: dependabot configuration file.</li> <li><code>.gitignore</code>: contains the files to ignore in the project.</li> </ul>"},{"location":"#11-local-prerequisites","title":"1.1.  Local Prerequisites","text":"<ul> <li>Ubuntu 22.04 or MacOS</li> <li>Python 3.11</li> </ul>"},{"location":"#steps-for-installation-users","title":"\u2699\ufe0f Steps for Installation (Users)","text":"<p>Use pip or uv pip to install the package :</p> <pre><code>pip install \"dist/dist/python_package_template-0.1.0-py3-none-any.whl\"\n# or\nuv pip install \"dist/dist/python_package_template-0.1.0-py3-none-any.whl\"\n</code></pre>"},{"location":"#usage","title":"Usage","text":"<pre><code>from python_package_template.example import hello\nhello()\n# Output: 2025-01-05 08:05:38.143 | INFO     | python_package_template.example:hello:5 - Hello world\n</code></pre>"},{"location":"#check-the-documentation","title":"Check the documentation","text":"<p>You can check the documentation (website), or the <code>notebook.ipynb</code>.</p>"},{"location":"#13-steps-for-installation-contributors-and-maintainers","title":"1.3 \u2699\ufe0f Steps for Installation (Contributors and maintainers)","text":"<p>Check the CONTRIBUTING.md file for installation instructions</p>"},{"location":"#2-contributing","title":"2. Contributing","text":"<p>Check the CONTRIBUTING.md file for more information.</p>"},{"location":"CONTRIBUTING/","title":"Contributing to this project","text":"<p>First off, thanks for taking the time to contribute! \u2764\ufe0f</p>"},{"location":"CONTRIBUTING/#1-code-of-conduct","title":"1. Code of Conduct","text":"<p>This project and everyone participating in it is governed by the Code of Conduct. By participating, you are expected to uphold this code. Please report unacceptable behavior.</p>"},{"location":"CONTRIBUTING/#2-team-members","title":"2. Team members:","text":"<ul> <li>Amine Djeghri</li> </ul>"},{"location":"CONTRIBUTING/#3-best-practices","title":"3. Best practices \ud83d\udca1","text":"<ul> <li>Docstring your functions and classes, it is even more important as it is used to generate the documentation with   Mkdocs</li> <li>If you use an IDE (like pycharm), define src the \"source\" folder and test the \"test\" folder so your IDE can help you   auto import files</li> <li> <p>Use the <code>make</code> commands to run your code, it is easier and faster than writing the full command (and check the   Makefile for all available commands \ud83d\ude09)</p> <ul> <li>Run Use the pre-commit hooks to ensure your code is formatted correctly and is of good   quality</li> <li>UV is powerful (multi-thread, package graph solving, rust backend, etc.) use it as   much as you can.</li> <li>If you have a lot of data, use Polars for faster and more efficient dataframe processing.</li> <li>If you have CPU intensive tasks, use multiprocessing with python's pool map.</li> </ul> </li> <li> <p>Exceptions:</p> <ul> <li>Always log the exceptions and errors (use loguru) and then raise them <code>py     except Exception as e:       logger.error(e)  # Log the original error  with a personalized message or with e (only the message will be logged)       raise e # All the stack trace will be logged</code></li> <li>Sometimes, you don't need to raise the exception (in a loop for example) to not interrupt the execution.</li> <li>Use if else instead of catching and raising the exception when possible (log and raise also)   <code>py       if not os.path.exists(file_path):           logger.error(f\"File not found: {file_path}. The current directory is: {os.getcwd()}\")           raise FileNotFoundError(f\"The file {file_path} does not exist.\")</code></li> </ul> </li> </ul>"},{"location":"CONTRIBUTING/#4-how-to-contribute","title":"4. How to contribute","text":""},{"location":"CONTRIBUTING/#41-file-structure-tree","title":"4.1 File structure (\ud83c\udf33 Tree)","text":"<p>Check the readme file.</p>"},{"location":"CONTRIBUTING/#42-steps-for-installation-contributors-and-maintainers","title":"4.2 Steps for Installation (Contributors and maintainers)","text":"<ul> <li>The first step is to install, read and test the project as a user</li> <li>Then you can either develop in a container   or develop locally</li> </ul>"},{"location":"CONTRIBUTING/#a-local-development","title":"a. Local development","text":"<ul> <li>Requires Debian (Ubuntu 22.04) or MacOS.</li> <li>Python will be installed using uv.</li> <li>git clone the repository</li> <li> <p>Install the package in editable mode with one of the following commands :</p> <ul> <li><code>make install-dev</code> the recommended way. it uses uv and will automatically create a .venv folder inside the   project and install the dependencies</li> <li>or <code>uv pip install -e .</code> will install the package in your selected environment (venv, or conda or ...)</li> <li>(note recommended)  or <code>pip install -e .</code> if you don't have uv (we strongly recommend starting using uv)</li> </ul> </li> <li> <p>run <code>make pre-commit install</code> to install pre-commit hooks</p> </li> <li>To install the GitHub actions locally, run <code>make install-act</code></li> </ul>"},{"location":"CONTRIBUTING/#b-or-develop-in-a-container","title":"b. or Develop in a container","text":"<ul> <li>You can run a docker image containing the project with <code>make docker-prod</code> (or <code>make docker-dev</code> if you want the   project to be mounted in the container).</li> <li>Inside the container, run <code>make test-installation</code> and <code>make test</code></li> <li>A venv is created inside the container and the dependencies are installed.</li> <li>(Optional) UV will handle this automatically. However, if you face a problem with the .venv folder, and you have a   .venv folder locally and also mounted in the container, you need the local one with (<code>rm -rf .venv</code>); otherwise it will create a conflict since the project   is mounted in the container.</li> </ul>"},{"location":"CONTRIBUTING/#43-run-the-test-to-see-if-everything-is-working","title":"4.3. Run the test to see if everything is working","text":"<ul> <li>Create a <code>.env</code> file (take a look at the <code>.env.example</code> file):</li> <li>Test the package with :<ul> <li><code>make test-installation</code> Will print a hello message</li> <li><code>make test</code> will run all the tests (requires .env file)</li> </ul> </li> </ul>"},{"location":"CONTRIBUTING/#44-pushing-your-work","title":"4.4. Pushing your work","text":"<ul> <li> <p>Before you start working on an issue, please comment on (or create) the issue and wait for it to be assigned to you.   If   someone has already been assigned but didn't have the time to work on it lately, please communicate with them and ask   if   they're still working on it. This is to avoid multiple people working on the same issue.   Once you have been assigned an issue, you can start working on it. When you are ready to submit your changes, open a   pull request. For a detailed pull request tutorial, see this guide.</p> </li> <li> <p>Create a branch from the dev branch and respect the naming convention: <code>feature/your-feature-name</code>    or <code>bugfix/your-bug-name</code>.</p> </li> <li> <p>Before commiting your code :</p> <ul> <li>Run <code>make test</code> to run the tests</li> <li>Run <code>make pre-commit</code> to check the code style &amp; linting.</li> <li>Run <code>make serve-docs</code> to update the documentation</li> <li>(optional) Commit Messages: This project uses Gitmoji for commit messages. It helps to   understand the purpose of the commit through emojis. For example, a commit message with a bug fix can be prefixed   with   \ud83d\udc1b. There are also Emojis in GitHub</li> <li>Manually, merge dev branch into your branch to solve and avoid any conflicts. Merging strategy: merge : dev \u2192   your_branch</li> <li>After merging, run <code>make test</code> and <code>make pre-commit</code> again to ensure that the tests are still passing.</li> <li>Update the version in <code>pyproject.toml</code> file</li> <li>if your project is a python package, run <code>make build-pacakge</code> to build the package and create the wheel in the   <code>dist</code> folder</li> <li>Run CI/CD Locally: Depending on the platform you use:</li> <li>GitHub Actions: run <code>make install-act</code> then <code>make act</code> for GitHub Actions (Docker should be running).</li> <li>Create a pull request. If the GitHub actions pass, the PR will be accepted and merged to dev.</li> </ul> </li> </ul>"},{"location":"CONTRIBUTING/#45-dependabot-automatic-dependency-updates-and-more","title":"4.5. Dependabot: automatic dependency updates and more","text":"<ul> <li>Dependabot file for autoupdates can be found here</li> <li>When Dependabot creates many PRs and you accept one, wait for the other to be rebased</li> <li>Enable dependabot for the   project: https://docs.github.com/en/code-security/getting-started/dependabot-quickstart-guide#enabling-dependabot-for-your-repository</li> </ul>"},{"location":"CONTRIBUTING/#45-for-repository-maintainers-merging-strategies-github-actions-guidelines","title":"4.5. (For repository maintainers) Merging strategies &amp; GitHub actions guidelines**","text":"<ul> <li>Once the dev branch is tested, the pipeline is green, and the PR has been accepted, you can merge with a 'merge'   strategy.</li> <li>DEV \u2192 MAIN: Then, you should create a merge from dev to main with Squash strategy.</li> <li>MAIN \u2192 RELEASE: The status of the ticket will change then to 'done.'</li> </ul>"},{"location":"CONTRIBUTING/#github-pages-automatic-deployment","title":"Github pages automatic deployment :","text":"<p>Check this link to configure GitHub pages link - You need to have the branch 'gh-pages' in your repository after following this tutorial. - You need to give the right permissions to GithubAction: Check that \"Read and write permissions\" are enabled in Settings -&gt; Actions -&gt; General -&gt; Workflow permissions - Github Actions will run automatically and deploy it from the main branch. If you face an error saying that your branch   is not allowed to deploy to github-pages, check this issue\" - (Optional) If you want to manually deploy the documentation, run <code>make deploy-doc-gh</code> it will push the documentation to the gh-pages branch</p>"},{"location":"CONTRIBUTING/#creating-tags-for-releases","title":"Creating tags for releases","text":"<ul> <li>First, pull the main branch, then run <code>make build-package</code>.</li> <li>In GitHub, I create a release with that tag (same as in pyproject.toml), automatically generate the release notes and   upload the package (wheel).</li> <li>Using github actions, just make sure you have this   set : https://github.com/actions/deploy-pages/issues/33#issuecomment-1198635538</li> </ul>"},{"location":"package/python_package_template/example/","title":"Example","text":""},{"location":"package/python_package_template/utils/","title":"Utils","text":""},{"location":"package/python_package_template/utils/#src.python_package_template.utils.Settings","title":"<code>Settings</code>","text":"<p>               Bases: <code>BaseSettings</code></p> <p>Settings class for the application.</p> Source code in <code>src/python_package_template/utils.py</code> <pre><code>class Settings(BaseSettings):\n    \"\"\"Settings class for the application.\"\"\"\n\n    # if .env is present, it will override the environment variables\n    model_config = SettingsConfigDict(env_file=\".env\", extra=\"ignore\")\n\n    # use .get_secret_value() to get the value\n    EXAMPLE_API_KEY: Optional[SecretStr] = Field(default=None, description=\"the api key\")\n    EXAMPLE_ENDPOINT: Optional[str] = Field(default=None, description=\"the endpoint\")\n\n    DEV_MODE: bool = False\n</code></pre>"}]}